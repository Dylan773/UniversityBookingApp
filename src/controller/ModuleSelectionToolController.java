package controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.FileChooser;
import model.Course;
import model.Module;
import model.Schedule;
import model.StudentProfile;
import view.CreateStudentProfilePane;
import view.ModuleReservationPane;
import view.ModuleSelectionPane;
import view.ModuleSelectionToolMenuBar;
import view.ModuleSelectionToolRootPane;
import view.OverviewPane;

/**
 * Module Selection Application Controller.
 * 
 * This class is responsible for managing events generated by the view, and
 * updating the model accordingly.
 * 
 * @author Dylan Brand, P2523268
 */
public class ModuleSelectionToolController {

	/* Fields */
	private ModuleSelectionToolRootPane view;
	private StudentProfile model;
	private CreateStudentProfilePane cspp;
	private ModuleSelectionToolMenuBar mstmb;
	private ModuleSelectionPane msp;
	private ModuleReservationPane mrp;
	private OverviewPane op;

	private static final Predicate<Module> t1Unselected = m -> m.getDelivery() == Schedule.TERM_1
			&& m.isMandatory() == false;
	private static final Predicate<Module> t2Unselected = m -> m.getDelivery() == Schedule.TERM_2
			&& m.isMandatory() == false;
	private static final Predicate<Module> t1Selected = m -> m.getDelivery() == Schedule.TERM_1
			&& m.isMandatory() == true;
	private static final Predicate<Module> t2Selected = m -> m.getDelivery() == Schedule.TERM_2
			&& m.isMandatory() == true;
	private static final Predicate<Module> yearLong = m -> m.getDelivery() == Schedule.YEAR_LONG
			&& m.isMandatory() == true;

	/* Constructor(s) */

	/**
	 * Default Constructor.
	 * 
	 * Creates a new instance of ModuleSelectionToolController. This constructor
	 * decouples the model and view, synchronising them both as necessary.
	 * 
	 * @param view  The controlling (root pane) class for all panes within this
	 *              application.
	 * @param model The underlying data model for this application.
	 */
	public ModuleSelectionToolController(ModuleSelectionToolRootPane view, StudentProfile model) {
		// Initialise view and model fields
		this.view = view;
		this.model = model;

		// Initialise view subcontainer fields
		cspp = view.getCreateStudentProfilePane();
		mstmb = view.getModuleSelectionToolMenuBar();
		msp = view.getModuleSelectionPane();
		mrp = view.getModuleReservationPane();
		op = view.getOverviewPane();

		// add courses to combobox in create student profile pane using the
		// generateAndReturnCourses helper method below
		cspp.addCoursesToComboBox(generateAndReturnCourses());

		// Attach event handlers to view using private helper method
		this.attachEventHandlers();

		// CreateStudentProfilePane Bindings
		// cspp.addBtnCreateBind(cspp.isFormEmpty());
		this.attachBindings();
	}

	/* Methods */

	/**
	 * Instantiates all event handlers for this application.
	 */
	private void attachEventHandlers() {
		// CreateStudentProfile Event Handler
		cspp.addCreateStudentProfileHandler(new CreateStudentProfileHandler());

		// ModuleSelectionToolBarMenu Event Handlers
		mstmb.addExitHandler(e -> System.exit(0));
		mstmb.addAboutHandler(
				e -> alertDialogBuilder(AlertType.INFORMATION, "About", "Module Selection Application\n\t\t\t v1.0",
						"Application for university students to book their final year modules."));
		mstmb.addSaveHandler(new SaveStudentDataHandler());
		mstmb.addLoadHandler(new LoadStudentDataHandler());

		// ModuleSelectionPane Event Handlers
		msp.addAddHandlerT1(new AddHandlerT1());
		msp.addRemoveHandlerT1(new RemoveHandlerT1());
		msp.addAddHandlerT2(new AddHandlerT2());
		msp.addRemoveHandlerT2(new RemoveHandlerT2());
		msp.addResetHandler(new ResetHandler());
		msp.addSubmitHandler(new SubmitHandler());

		// ModuleReservationPane Event Handlers
		mrp.addAddHandlerT1(new AddHandlerT1MRP());
		mrp.addRemoveHandlerT1(new RemoveHandlerT1MRP());
		mrp.addAddHandlerT2(new AddHandlerT2MRP());
		mrp.addRemoveHandlerT2(new RemoveHandlerT2MRP());
		mrp.addConfrimHandlerT1(new ConfirmHandlerT1());
		mrp.addConfirmHandlerT2(new ConfirmHandlerT2());

		// OverviewPane Event Handler
		op.addSaveHandler(new SaveOverviewHandler());
	}

	/**
	 * Instantiates all bindings for this application
	 */
	public void attachBindings() {
		// CreateStudentProfilePane Bindings
		cspp.addBtnCreateBind(cspp.isFormEmpty());

		// OverviewPane Bindings
		op.addBtnCreateBind(op.isFormEmpty());
	}

	/**
	 * Tests the specified Module to supplied predicate. If the input argument
	 * (module) == the specified Module, that Module is added to the ObservableList.
	 * Otherwise, that Module is not added.
	 * 
	 * @param list      The ObservableList (data)
	 * @param toAdd     The Module to be added
	 * @param predicate The specified predicate (argument)
	 */
	private void addModules(ObservableList<Module> list, Module toAdd, Predicate<Module> predicate) {
		if (predicate.test(toAdd))
			list.add(toAdd);
	}

	/**
	 * Calculates and sets the value of the ModuleSelectionPane's credit counter's
	 * for both Term 1 and 2.
	 */
	private void mspCalcCredits() {
		msp.setT1CreditCount((msp.getLvSelectedT1().getModules().size() * 15) + 15); // +15 for year long module
		msp.setT2CreditCount((msp.getLvSelectedT2().getModules().size() * 15) + 15); // +15 for year long module
	}

	/**
	 * Clears all existing modules within the ModuleSelectionPane's ListView's and
	 * re-populates these ListView's to their default selection (Module's) using the
	 * currently selected course (ComSci/SoftEng).
	 * 
	 * @param model The StudentProfile data
	 */
	private void defaultModulesMSP(StudentProfile model) {
		// Checks if data in the model exists
		if (model.getStudentCourse() == null) {
			alertDialogBuilder(AlertType.ERROR, "Error", null, "Please create student profile");
			return;
		}
		// Clears the ListView's of any previous data
		msp.getLvSelectedT1().getModules().clear();
		msp.getLvSelectedT2().getModules().clear();
		msp.getLvUnselectedT1().getModules().clear();
		msp.getLvUnselectedT2().getModules().clear();
		msp.getLvYearModules().getModules().clear();

		// Retrieves all modules of the current course saved in the model.
		Collection<Module> modules = model.getStudentCourse().getAllModulesOnCourse();

		// Uses the collection above, and populates the relevant ListView's using a
		// custom addModules method.
		for (Module mod : modules) {
			addModules(msp.getLvUnselectedT1().getModules(), mod, t1Unselected);
			addModules(msp.getLvUnselectedT2().getModules(), mod, t2Unselected);
			addModules(msp.getLvSelectedT1().getModules(), mod, t1Selected);
			addModules(msp.getLvSelectedT2().getModules(), mod, t2Selected);
			addModules(msp.getLvYearModules().getModules(), mod, yearLong);
		}
		// Calculates and sets the term 1 and 2 credit count
		mspCalcCredits();
	}

	/**
	 * Retrieves the StudentProfile data currently saved in the model, populating
	 * the relevant TextField's and DatPicker in the CreateStudentProfilePane using
	 * the data obtained.
	 */
	private void updateCSPP() {
		cspp.setSelectedCourse(model.getStudentCourse());
		cspp.setStudentPnumber(model.getStudentPnumber());
		cspp.setStudentFirstName(model.getStudentName().getFirstName());
		cspp.setStudentSurname(model.getStudentName().getFamilyName());
		cspp.setStudentEmail(model.getStudentEmail());
		cspp.setStudentDate(model.getSubmissionDate());
	}

	/**
	 * Retrieves the selected modules data currently saved in the model, iterating
	 * through these modules and populating the relevant ListView's in the
	 * ModuleSelectionPane. Additionally, updating the term 1 and 2 credit value's.
	 */
	private void updateMSP() {
		// Clears all existing items (Modules) within the ModuleSelectionPane's
		// ListView's
		msp.getLvSelectedT1().getModules().clear();
		msp.getLvSelectedT2().getModules().clear();
		msp.getLvUnselectedT1().getModules().clear();
		msp.getLvUnselectedT2().getModules().clear();
		msp.getLvYearModules().getModules().clear();

		// Re-populates the MSP ListView's to its default selection (CompSci/SoftEng).
		defaultModulesMSP(model);

		// Retrieves all selected modules currently saved to the StudentProfile
		// and populates the relevant ListView's with the matching arguments
		model.getAllSelectedModules().forEach(n -> {
			if (n.isMandatory())
				return; // Do nothing

			if (n.getDelivery() == Schedule.TERM_1) {
				msp.getLvUnselectedT1().getItems().remove(n);
				msp.getLvSelectedT1().addModule(n);
			} else if (n.getDelivery() == Schedule.TERM_2) {
				msp.getLvUnselectedT2().getItems().remove(n);
				msp.getLvSelectedT2().addModule(n);
			}
		});

		// Calculates and updates the MSP T1 and T2 credit count.
		mspCalcCredits();
	}

	/**
	 * Retrieves the reserved modules data currently saved in the model, iterating
	 * through these modules and populating the relevant ListView's in the
	 * ModuleReservationPane. Additionally, updating the term 1 and 2 credit
	 * value's.
	 */
	private void updateMRP() {
		// Clears any existing data from the ListView's
		mrp.getLvUnreservedT1().getModules().clear();
		mrp.getLvUnreservedT2().getModules().clear();
		mrp.getLvReservedT1().getModules().clear();
		mrp.getLvReservedT2().getModules().clear();

		// Retrieves all unselected modules from the ModuleSelectionPane and populates
		// the relevant ListView (T1 or T2)
		msp.getLvUnselectedT1().getModules().forEach(n -> mrp.getLvUnreservedT1().addModule(n));
		msp.getLvUnselectedT2().getModules().forEach(n -> mrp.getLvUnreservedT2().addModule(n));

		// Retrieves all ReservedModules data from the model and populates the relevant
		// ListView's using the obtained data
		model.getAllReservedModules().forEach(n -> {
			if (n.getDelivery() == Schedule.TERM_1) {
				mrp.getLvReservedT1().addModule(n);
				mrp.getLvUnreservedT1().getItems().remove(n);
			} else if (n.getDelivery() == Schedule.TERM_2) {
				mrp.getLvReservedT2().addModule(n);
				mrp.getLvUnreservedT2().getItems().remove(n);
			}
		});

		// Set's the value of the T1 and T2 credit count
		mrp.setT1CreditCount(mrp.getLvReservedT1().getModules().size() * 15);
		mrp.setT2CreditCount(mrp.getLvReservedT2().getModules().size() * 15);

		// Displays the Term 1 tab as default
		mrp.setExpandedPane(mrp.getT1());
	}

	/**
	 * Retrieves the StudentProfile data currently saved in the model, populating
	 * the relevant TextArea's in the OverviewePane using the data obtained.
	 * 
	 * Maps Module objects to String objects using a stream.
	 */
	private void updateOverviewPane() {
		// Retrieves all selected and reserved modules saved in the model.
		Collection<Module> selectedModules = model.getAllSelectedModules();
		Collection<Module> reservedModules = model.getAllReservedModules();

		// Maps Module objects to a String object, enabling a uniformed layout.
		String sModules = selectedModules.stream().map(Object::toString).collect(Collectors.joining("\n"));
		String rModules = reservedModules.stream().map(Object::toString).collect(Collectors.joining("\n"));

		// Set the text of the TextArea's on the OverviewPane
		op.getStudentDetails().setText(model.toSimplifiedString());
		op.getSelectedModules().setText("Selected Modules\n========\n" + sModules);
		op.getReservedModules().setText("Reserved Modules\n========\n" + rModules);
	}

	/**
	 * Reloads the applications GUI with data stored in the model. This method calls
	 * custom methods to individually update each pane within the
	 * ModuleSelectionTool application.
	 * 
	 * @param model The StudentProfile data
	 */
	private void reloadGUI(StudentProfile model) {
		updateCSPP(); // CreateStudentProfilePane
		updateMSP(); // ModuleSelectionPane
		updateMRP(); // ModuleReservationPane
		updateOverviewPane(); // OverviewPane
	}

	/**
	 * Alert Dialog Builder method that can be instantiated to display a variety of
	 * different messages to the user based on their actions.
	 * 
	 * E.g. If an error in the application occurs, an error dialog box can be
	 * displayed alerting the user.
	 * 
	 * @param type    The type of the alert.
	 * @param title   The title of the dialog box.
	 * @param header  The content for the header of the dialog box.
	 * @param content The message to be displayed to the user in the content area.
	 */
	private void alertDialogBuilder(AlertType type, String title, String header, String content) {
		Alert alert = new Alert(type);
		alert.setTitle(title);
		alert.setHeaderText(header);
		alert.setContentText(content);
		alert.showAndWait();
	}

	/* Event Handling */

	/**
	 * CreateStudentProfilePane Handler.
	 * 
	 * Obtains all user input from the CreateStudentProfilePane and stores this data
	 * in the model.
	 * 
	 * Using the data stored in the model, the ModuleSelectionPane's ListView's are
	 * dynamically populated and the term 1 and 2 credit counts are set using the
	 * course (CompSci/SoftEng) that was selected on the CreateStudentProfilePane.
	 * 
	 * @author Dylan
	 */
	private class CreateStudentProfileHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			// Obtain and set StudentProfile data
			model.setStudentPnumber(view.getCreateStudentProfilePane().getStudentPnumber());
			model.setStudentName(view.getCreateStudentProfilePane().getStudentName());
			model.setSubmissionDate(view.getCreateStudentProfilePane().getStudentDate());
			model.setStudentCourse(view.getCreateStudentProfilePane().getSelectedCourse());
			model.setStudentEmail(view.getCreateStudentProfilePane().getStudentEmail());

			// Dynamically populates the ListView's, using the chosen student course
			defaultModulesMSP(model);

			// Calculates and updates the credit count for term 1 and 2 modules on
			// ModuleSelectionPane
			mspCalcCredits();

			// Once the data is stored, the user is directed to ModuleSelectionPane
			view.changeTab(1);
		}
	}

	/**
	 * ModuleSelectionPane Add Button Handler for term 1 modules.
	 * 
	 * Obtains the current selected item (module) on the term 1 unselected modules
	 * ListView and performs an action depending on the environment.
	 * 
	 * If the selected item == null or the term 1 credit count has reached it's
	 * maximum value (60), the user is prompted with a warning message and no action
	 * is performed.
	 * 
	 * Otherwise, the selected module is removed from the unselected modules
	 * ListView and added to the selected modules ListView. The term 1 credit count
	 * is also incremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class AddHandlerT1 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = msp.getLvUnselectedT1().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null,
						"Please select a term 1 module to add");
			} else if (selected.getModuleCredits() + msp.getT1CreditCount() > 60) {
				alertDialogBuilder(AlertType.WARNING, "Credit Count Error", null,
						"Cannot exceed 60 credits for Term 1");
			} else {
				msp.getLvSelectedT1().addModule(selected);
				msp.getLvUnselectedT1().getModules().remove(selected);
				msp.updateT1CreditCount(selected.getModuleCredits()); // Increment term 1 credit count
			}
		}
	}

	/**
	 * ModuleSelectionPane Remove Button Handler for term 1 module's.
	 * 
	 * Obtains the current selected item (module) on the term 2 ListView and
	 * performs an action depending on the environment.
	 * 
	 * If the selected item == null, the user is prompted with a warning message and
	 * no action is performed.
	 * 
	 * Otherwise, the selected module is removed from the selected module's ListView
	 * and added to the unselected module's ListView. The term 1 credit count is
	 * also decremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class RemoveHandlerT1 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = msp.getLvSelectedT1().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null,
						"Please select a term 1 module to remove");
			} else if (selected.isMandatory()) {
				alertDialogBuilder(AlertType.WARNING, "Mandatory Module", null, "Cannot remove mandatory module");
			} else {
				msp.getLvUnselectedT1().addModule(selected);
				msp.getLvSelectedT1().getModules().remove(selected);

				// Updates the credit count
				msp.updateT1CreditCount(-selected.getModuleCredits());
			}
		}
	}

	/**
	 * ModuleSelectionPane Add Button Handler for term 2 modules.
	 * 
	 * Obtains the current selected item (module) on the term 2 unselected module's
	 * ListView and performs an action depending on the environment.
	 * 
	 * If the selected item == null or the term 2 credit count has reached it's
	 * maximum value (60), the user is prompted with a warning message and no action
	 * is performed.
	 * 
	 * Otherwise, the selected module is removed from the unselected module's
	 * ListView and added to the selected module's ListView. The term 2 credit count
	 * is also incremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class AddHandlerT2 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = msp.getLvUnselectedT2().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null,
						"Please select a term 2 module to add");
			} else if (selected.getModuleCredits() + msp.getT2CreditCount() > 60) {
				alertDialogBuilder(AlertType.WARNING, "Credit Count Error", null,
						"Cannot exceed 60 credits for Term 2");
			} else {
				msp.getLvSelectedT2().addModule(selected);
				msp.getLvUnselectedT2().getModules().remove(selected);
				msp.updateT2CreditCount(selected.getModuleCredits());
			}
		}
	}

	/**
	 * ModuleSelectionPane Remove Button Handler for term 2 module's.
	 * 
	 * Obtains the current selected item (module) on the term 2 ListView and
	 * performs an action depending on the environment.
	 * 
	 * If the selected item == null, the user is prompted with a warning message and
	 * no action is performed.
	 * 
	 * Otherwise, the selected module is removed from the selected module's ListView
	 * and added to the unselected module's ListView. The term 2 credit count is
	 * also decremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class RemoveHandlerT2 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = msp.getLvSelectedT2().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null,
						"Please select a term 2 module to remove");
			} else if (selected.isMandatory()) {

			} else {
				msp.getLvUnselectedT2().addModule(selected);
				msp.getLvSelectedT2().getModules().remove(selected);
				msp.updateT2CreditCount(-selected.getModuleCredits());
			}
		}
	}

	/**
	 * ModuleSelectionPane Reset Button Handler.
	 * 
	 * This event handler resets the ModuleSelectionPane's ListView's and credit
	 * count to their default values.
	 * 
	 * This handler clears all modules that are currently displayed within the
	 * relevant ListView's on the ModuleSelectionPane and dynamically re-populates
	 * the ListView's using a custom defaultModules method, using the chosen course
	 * (CompSci/SoftEng).
	 * 
	 * The term 1 and 2 credit counts are re-calculated and set to their default
	 * value.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class ResetHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			// Clears any existing data in the MSP ListView's
			msp.getLvSelectedT1().getModules().clear();
			msp.getLvSelectedT2().getModules().clear();
			msp.getLvUnselectedT1().getModules().clear();
			msp.getLvUnselectedT2().getModules().clear();
			msp.getLvYearModules().getModules().clear();

			// Dynamically populates the ListView's
			defaultModulesMSP(model);

			// Calculates and sets the credit value for term 1 and 2
			// mspCalcCredits();
		}
	}

	/**
	 * ModuleSelectionPane Submit Button Handler.
	 * 
	 * Allows the user to submit modules that they have selected, and store these
	 * modules in the model.
	 * 
	 * If the user has not selected 120 credits (60 credits each term), no action
	 * will be performed and an error message will be displayed, prompting the user
	 * to select 120 credits worth of modules.
	 * 
	 * Once the 120 credit criteria has been met, the selected module's will be
	 * saved to the model. All unselected modules for term 1 and 2 will be populated
	 * on the relevant ListView's on the ModuleReservationPane, allowing the user to
	 * reserve an additional 30 credits worth of modules for term 1 and 2.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class SubmitHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			if (msp.getT1CreditCount() + msp.getT2CreditCount() != 120) {
				alertDialogBuilder(AlertType.ERROR, "Error", null, "Please select 60 credits for each term");
			} else {
				// Updating the model
				model.getAllSelectedModules().clear();

				msp.getLvSelectedT1().getModules().forEach(n -> model.addSelectedModule(n));
				msp.getLvSelectedT2().getModules().forEach(n -> model.addSelectedModule(n));

				// Calls this custom method that updates (populates) the ModuleReservationPane
				updateMRP();

				// Re-direct the user to the ModuleReservationPane
				view.changeTab(2);
			}
		}
	}

	/**
	 * ModuleReservationPane Add Button Handler for term 1 modules.
	 * 
	 * Obtains the current selected item (module) on the term 1 unreserved module's
	 * ListView and performs an action depending on the environment.
	 * 
	 * If the selected item == null or the term 1 reserved credit count has reached
	 * it's maximum value (30), the user is prompted with a warning message and no
	 * action is performed.
	 * 
	 * Otherwise, the selected module is removed from the unreserved module's
	 * ListView and added to the reserved module's ListView. The term 1 credit count
	 * is also incremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class AddHandlerT1MRP implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = mrp.getLvUnreservedT1().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null, "Please select a module to reserve");
			} else if (selected.getModuleCredits() + mrp.getT1CreditCount() > 30) {
				alertDialogBuilder(AlertType.WARNING, "Credit Count Error", null,
						"Cannot exceed 30 credits for Term 1");
			} else {
				mrp.getLvReservedT1().addModule(selected);
				mrp.getLvUnreservedT1().getModules().remove(selected);
				mrp.updateT1CreditCount(selected.getModuleCredits());
			}
		}
	}

	/**
	 * ModuleReservationPane Remove Button Handler for term 1 module's.
	 * 
	 * Obtains the current selected item (module) on the term 1 ListView and
	 * performs an action depending on the environment.
	 * 
	 * If the selected item == null, the user is prompted with a warning message and
	 * no action is performed.
	 * 
	 * Otherwise, the selected module is removed from the reserved module's ListView
	 * and added to the unreserved module's ListView. The term 1 credit count is
	 * also decremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class RemoveHandlerT1MRP implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = mrp.getLvReservedT1().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null, "Please select a module to remove");
			} else {
				mrp.getLvUnreservedT1().addModule(selected);
				mrp.getLvReservedT1().getModules().remove(selected);
				mrp.updateT1CreditCount(-selected.getModuleCredits()); // Decrement the credit counter
			}
		}
	}

	/**
	 * ModuleReservationPane Add Button Handler for term 2 modules.
	 * 
	 * Obtains the current selected item (module) on the term 2 unreserved module's
	 * ListView and performs an action depending on the environment.
	 * 
	 * If the selected item == null or the term 2 reserved credit count has reached
	 * it's maximum value (30), the user is prompted with a warning message and no
	 * action is performed.
	 * 
	 * Otherwise, the selected module is removed from the unreserved module's
	 * ListView and added to the reserved module's ListView. The term 2 credit count
	 * is also incremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class AddHandlerT2MRP implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = mrp.getLvUnreservedT2().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null, "Please select a module to reserve");
			} else if (selected.getModuleCredits() + mrp.getT2CreditCount() > 30) {
				alertDialogBuilder(AlertType.WARNING, "Credit Count Error", null,
						"Cannot exceed 30 credits for Term 2");
			} else {
				mrp.getLvReservedT2().addModule(selected);
				mrp.getLvUnreservedT2().getModules().remove(selected);
				mrp.updateT2CreditCount(selected.getModuleCredits());
			}
		}
	}

	/**
	 * ModuleReservationPane Remove Button Handler for term 2 module's.
	 * 
	 * Obtains the current selected item (module) on the term 2 ListView and
	 * performs an action depending on the environment.
	 * 
	 * If the selected item == null, the user is prompted with a warning message and
	 * no action is performed.
	 * 
	 * Otherwise, the selected module is removed from the reserved module's ListView
	 * and added to the unreserved module's ListView. The term 2 credit count is
	 * also decremented with the selected modules credit value.
	 *
	 * @author Dylan Brand, P2523268
	 */
	private class RemoveHandlerT2MRP implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			Module selected = mrp.getLvReservedT2().getSelectionModel().getSelectedItem();

			if (selected == null) {
				alertDialogBuilder(AlertType.WARNING, "No Module Selected", null, "Please select a module to remove");
			} else {
				mrp.getLvUnreservedT2().addModule(selected);
				mrp.getLvReservedT2().getModules().remove(selected);
				mrp.updateT2CreditCount(-selected.getModuleCredits()); // Decrement the credit counter
			}
		}
	}

	/**
	 * ModuleReservationPane Term 1 Confirm Handler.
	 * 
	 * Obtains the selected modules for term 1 and saves these to the reserved
	 * modules in the underlying data model.
	 * 
	 * If the user has not selected 30 credits worth of term 1 modules, no action
	 * will be performed and an error message will be displayed.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class ConfirmHandlerT1 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			// Storing the selected models in the model
			if (mrp.getT1CreditCount() < 30) {
				alertDialogBuilder(AlertType.ERROR, "Error", null, "Please select 30 credits for term 1");
			} else {
				// Update the model
				model.getAllReservedModules().clear();
				mrp.getLvReservedT1().getModules().forEach(n -> model.addReservedModule(n));

				// Change the accordion's pane
				mrp.setExpandedPane(mrp.getT2());
			}
		}
	}

	/**
	 * ModuleReservationPane Term 2 Confirm Handler.
	 * 
	 * Obtains the selected modules for term 2 and saves these to the reserved
	 * modules in the underlying data model.
	 * 
	 * If the user has not selected 30 credits worth of term 2 modules, no action
	 * will be performed and an error message will be displayed.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class ConfirmHandlerT2 implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			// Storing the selected models in the model
			if (mrp.getT2CreditCount() < 30) {
				alertDialogBuilder(AlertType.ERROR, "Error", null, "Please select 30 credits for term 2");
			} else if (mrp.getT1CreditCount() < 30) {
				alertDialogBuilder(AlertType.ERROR, "Error", null, "Please confirm term 1 modules");
			} else {
				mrp.getLvReservedT2().getModules().forEach(n -> model.addReservedModule(n));

				// Calls a custom method that sets the TextArea's data on the OverviewPane
				updateOverviewPane();

				// Directs the user to the OverviewPane
				view.changeTab(3);
			}
		}
	}

	/**
	 * Saves an overview of the student profile in text format.
	 * 
	 * Opens a SaveDialog window, allowing the user to choose the file name and save
	 * location.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class SaveOverviewHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			FileChooser fileChooser = new FileChooser();
			File selectedFile = fileChooser.showSaveDialog(null);

			try (PrintWriter printWriter = new PrintWriter(selectedFile)) {
				printWriter.write(op.getStudentDetailsText() + "\n\n" + op.getSelectedModulesText() + "\n\n"
						+ op.getReservedModulesText());
			} catch (FileNotFoundException | NullPointerException e1) {
				alertDialogBuilder(AlertType.ERROR, "Save Error", null, "Error Saving File");
			}
		}
	}

	/**
	 * Saves the underlying data model of the student profile to a file in binary
	 * format.
	 * 
	 * Opens a SaveDialog window, allowing the user to choose the file name and save
	 * location.
	 * 
	 * @author Dylan Brand, P2523268
	 */
	private class SaveStudentDataHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			FileChooser fileChooser = new FileChooser();
			File selectedFile = fileChooser.showSaveDialog(null);

			try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedFile))) {
				oos.writeObject(model); // Writes the model object to a file
				oos.flush();

				// Display Success Alert
				alertDialogBuilder(AlertType.INFORMATION, "Save success", null,
						"Student Profile saved to \"" + selectedFile.getName() + "\"");

				oos.close();
			} catch (IOException | NullPointerException e1) {
				alertDialogBuilder(AlertType.ERROR, "Save Error", null, "Error saving student profile");
			}
		}
	}

	/**
	 * Restores the underlying data model of a student profile from an external
	 * file. After successfully restoring a profile, the GUI is updated to its
	 * previous state (at the point of saving).
	 * 
	 * Opens an OpenDialog window, allowing the user to navigate through the file
	 * system and locate the external file for loading.
	 * 
	 * @author Dylan
	 */
	private class LoadStudentDataHandler implements EventHandler<ActionEvent> {

		public void handle(ActionEvent e) {
			FileChooser fileChooser = new FileChooser();
			File selectedFile = fileChooser.showOpenDialog(null);

			try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(selectedFile));) {

				model = (StudentProfile) ois.readObject();

				alertDialogBuilder(AlertType.INFORMATION, "Load Success", null,
						"Student Profile loaded from \"" + selectedFile.getName() + "\"");

				reloadGUI(model); // Update the GUI
			} catch (IOException | NullPointerException e1) {
				alertDialogBuilder(AlertType.ERROR, "Load Error", null, "Error loading data");
			} catch (ClassNotFoundException e2) {
				alertDialogBuilder(AlertType.ERROR, "Class Not Found", null, "Unable to locate data");
			}
		}
	}

	// helper method - generates course and module data and returns courses within
	// an array
	private Course[] generateAndReturnCourses() {
		Module imat3423 = new Module("IMAT3423", "Systems Building: Methods", 15, true, Schedule.TERM_1);
		Module ctec3451 = new Module("CTEC3451", "Development Project", 30, true, Schedule.YEAR_LONG);
		Module ctec3902_SoftEng = new Module("CTEC3902", "Rigorous Systems", 15, true, Schedule.TERM_2);
		Module ctec3902_CompSci = new Module("CTEC3902", "Rigorous Systems", 15, false, Schedule.TERM_2);
		Module ctec3110 = new Module("CTEC3110", "Secure Web Application Development", 15, false, Schedule.TERM_1);
		Module ctec3605 = new Module("CTEC3605", "Multi-service Networks 1", 15, false, Schedule.TERM_1);
		Module ctec3606 = new Module("CTEC3606", "Multi-service Networks 2", 15, false, Schedule.TERM_2);
		Module ctec3410 = new Module("CTEC3410", "Web Application Penetration Testing", 15, false, Schedule.TERM_2);
		Module ctec3904 = new Module("CTEC3904", "Functional Software Development", 15, false, Schedule.TERM_2);
		Module ctec3905 = new Module("CTEC3905", "Front-End Web Development", 15, false, Schedule.TERM_2);
		Module ctec3906 = new Module("CTEC3906", "Interaction Design", 15, false, Schedule.TERM_1);
		Module ctec3911 = new Module("CTEC3911", "Mobile Application Development", 15, false, Schedule.TERM_1);
		Module imat3410 = new Module("IMAT3104", "Database Management and Programming", 15, false, Schedule.TERM_2);
		Module imat3406 = new Module("IMAT3406", "Fuzzy Logic and Knowledge Based Systems", 15, false, Schedule.TERM_1);
		Module imat3611 = new Module("IMAT3611", "Computer Ethics and Privacy", 15, false, Schedule.TERM_1);
		Module imat3613 = new Module("IMAT3613", "Data Mining", 15, false, Schedule.TERM_1);
		Module imat3614 = new Module("IMAT3614", "Big Data and Business Models", 15, false, Schedule.TERM_2);
		Module imat3428_CompSci = new Module("IMAT3428", "Information Technology Services Practice", 15, false,
				Schedule.TERM_2);

		Course compSci = new Course("Computer Science");
		compSci.addModuleToCourse(imat3423);
		compSci.addModuleToCourse(ctec3451);
		compSci.addModuleToCourse(ctec3902_CompSci);
		compSci.addModuleToCourse(ctec3110);
		compSci.addModuleToCourse(ctec3605);
		compSci.addModuleToCourse(ctec3606);
		compSci.addModuleToCourse(ctec3410);
		compSci.addModuleToCourse(ctec3904);
		compSci.addModuleToCourse(ctec3905);
		compSci.addModuleToCourse(ctec3906);
		compSci.addModuleToCourse(ctec3911);
		compSci.addModuleToCourse(imat3410);
		compSci.addModuleToCourse(imat3406);
		compSci.addModuleToCourse(imat3611);
		compSci.addModuleToCourse(imat3613);
		compSci.addModuleToCourse(imat3614);
		compSci.addModuleToCourse(imat3428_CompSci);

		Course softEng = new Course("Software Engineering");
		softEng.addModuleToCourse(imat3423);
		softEng.addModuleToCourse(ctec3451);
		softEng.addModuleToCourse(ctec3902_SoftEng);
		softEng.addModuleToCourse(ctec3110);
		softEng.addModuleToCourse(ctec3605);
		softEng.addModuleToCourse(ctec3606);
		softEng.addModuleToCourse(ctec3410);
		softEng.addModuleToCourse(ctec3904);
		softEng.addModuleToCourse(ctec3905);
		softEng.addModuleToCourse(ctec3906);
		softEng.addModuleToCourse(ctec3911);
		softEng.addModuleToCourse(imat3410);
		softEng.addModuleToCourse(imat3406);
		softEng.addModuleToCourse(imat3611);
		softEng.addModuleToCourse(imat3613);
		softEng.addModuleToCourse(imat3614);

		Course[] courses = new Course[2];
		courses[0] = compSci;
		courses[1] = softEng;

		return courses;
	}
}